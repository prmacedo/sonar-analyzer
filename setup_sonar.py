import os
import platform
import zipfile
import urllib.request
import re

SCANNERS = {
    ("linux", "x86_64"): "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-linux-x64.zip",
    ("linux", "aarch64"): "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-linux-aarch64.zip",
    ("darwin", "x86_64"): "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-macosx-x64.zip",
    ("darwin", "arm64"): "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-macosx-aarch64.zip",
    ("windows", "amd64"): "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-windows-x64.zip",
}

def detect_scanner_url():
    system = platform.system().lower()
    arch = platform.machine().lower()
    if system == "windows" and arch in ["amd64", "x86_64"]:
        arch = "amd64"
    key = (system, arch)
    if key not in SCANNERS:
        raise RuntimeError(f"Unsupported OS/arch: {system} {arch}")
    return SCANNERS[key]

def download_scanner(url, dest_dir="scanners"):
    os.makedirs(dest_dir, exist_ok=True)
    zip_path = os.path.join(dest_dir, "scanner.zip")

    if not os.path.exists(zip_path):
        print(f"Downloading SonarScanner from {url} ...")
        urllib.request.urlretrieve(url, zip_path)

def slugify(text):
    text = text.lower()
    text = re.sub(r"[^a-z0-9]+", "-", text)
    return text.strip("-")

def main():
    url = detect_scanner_url()
    download_scanner(url)

    raw_dirs = input("Enter absolute project directory path(s) (comma-separated for multiple): ").strip()
    username = input("Enter your name: ").strip()
    output_dir = input("Enter the absolute path for CSV output directory: ").strip()
    sonar_token = input("Enter the SonarQube token: ").strip()

    os.makedirs(output_dir, exist_ok=True)

    # Normalize and validate project dirs
    dirs = [d.strip() for d in raw_dirs.split(",") if d.strip()]
    if not dirs:
        raise RuntimeError("No project directories provided.")
    for d in dirs:
        if not os.path.isabs(d):
            raise RuntimeError(f"Project directory must be an absolute path: {d}")
        if not os.path.isdir(d):
            raise RuntimeError(f"Project directory does not exist: {d}")

    os.makedirs("configs", exist_ok=True)

    # Generate unique project keys and env files
    seen_keys = set()
    env_paths = []
    for d in dirs:
        folder_name = os.path.basename(os.path.normpath(d))
        base_key = slugify(f"{username}-{folder_name}")
        project_key = base_key
        suffix = 2
        while project_key in seen_keys:
            project_key = f"{base_key}-{suffix}"
            suffix += 1
        seen_keys.add(project_key)

        env_content = (
            f"# Auto-generated by setup_sonar.py\n"
            f"PROJECT_DIR=\"{d}\"\n"
            f"USERNAME=\"{username}\"\n"
            f"OUTPUT_DIR=\"{output_dir}\"\n"
            f"SONAR_PROJECT_KEY=\"{project_key}\"\n"
            f"SONAR_TOKEN=\"{sonar_token}\"\n"
        )

        env_path = os.path.join("configs", f"{project_key}.env")
        with open(env_path, "w") as f:
            f.write(env_content)
        env_paths.append(env_path)

    # For backward compatibility, also write .env for the first project
    with open(".env", "w") as f:
        with open(env_paths[0], "r") as e0:
            f.write(e0.read())

    print("\nâœ… Setup complete!")
    if len(env_paths) == 1:
        print(f"Project key generated: {list(seen_keys)[0]}")
        print("A `.env` file has been created with your configuration.")
    else:
        print(f"Generated {len(env_paths)} project configurations under ./configs")
        print("Use one of them with DOTENV, e.g.:\n  DOTENV=configs/<project_key>.env ./run.sh")

if __name__ == "__main__":
    main()
