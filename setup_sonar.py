import os
import platform
import zipfile
import urllib.request
import re

SCANNERS = {
    ("linux", "x86_64"): "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-linux-x64.zip",
    ("linux", "aarch64"): "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-linux-aarch64.zip",
    ("darwin", "x86_64"): "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-macosx-x64.zip",
    ("darwin", "arm64"): "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-macosx-aarch64.zip",
    ("windows", "amd64"): "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-windows-x64.zip",
}

def detect_scanner_url():
    system = platform.system().lower()
    arch = platform.machine().lower()
    if system == "windows" and arch in ["amd64", "x86_64"]:
        arch = "amd64"
    key = (system, arch)
    if key not in SCANNERS:
        raise RuntimeError(f"Unsupported OS/arch: {system} {arch}")
    return SCANNERS[key]

def download_scanner(url, dest_dir="scanners"):
    os.makedirs(dest_dir, exist_ok=True)
    zip_path = os.path.join(dest_dir, "scanner.zip")

    if not os.path.exists(zip_path):
        print(f"Downloading SonarScanner from {url} ...")
        urllib.request.urlretrieve(url, zip_path)

    # print("Extracting SonarScanner...")
    # with zipfile.ZipFile(zip_path, "r") as zip_ref:
    #     zip_ref.extractall(dest_dir)

    # system = platform.system().lower()
    
    # Find extracted folder
    # for entry in os.listdir(dest_dir):
    #     if entry.startswith("sonar-scanner"):
    #         scanner_dir = os.path.join(dest_dir, entry)

    #         # Restore +x permissions for all scripts in bin/
    #         if platform.system().lower() in ("linux", "darwin"):
    #             bin_dir = os.path.join(scanner_dir, "bin")
    #             if os.path.isdir(bin_dir) and system in ("linux", "darwin"):
    #                 for fname in os.listdir(bin_dir):
    #                     fpath = os.path.join(bin_dir, fname)
    #                     if os.path.isfile(fpath):
    #                         os.chmod(fpath, 0o755)

            # return scanner_dir

    # raise RuntimeError("Could not find extracted sonar-scanner folder")

def slugify(text):
    text = text.lower()
    text = re.sub(r"[^a-z0-9]+", "-", text)
    return text.strip("-")

def main():
    url = detect_scanner_url()
    scanner_path = download_scanner(url)

    project_dir = input("Enter the absolute path to your project directory: ").strip()
    username = input("Enter your name: ").strip()
    output_dir = input("Enter the absolute path for CSV output directory: ").strip()

    os.makedirs(output_dir, exist_ok=True)

    # Create project key
    folder_name = os.path.basename(os.path.normpath(project_dir))
    project_key = slugify(f"{username}-{folder_name}")

# SONAR_SCANNER_PATH="{os.path.join(scanner_path, 'bin', 'sonar-scanner') if platform.system().lower() != 'windows' else os.path.join(scanner_path, 'bin', 'sonar-scanner.bat')}"
    env_content = f"""# Auto-generated by setup_sonar.py
PROJECT_DIR="{project_dir}"
USERNAME="{username}"
OUTPUT_DIR="{output_dir}"
SONAR_PROJECT_KEY="{project_key}"
"""
    with open(".env", "w") as f:
        f.write(env_content)

    print(f"\nâœ… Setup complete! Project key generated: {project_key}")
    print("A `.env` file has been created with your configuration.")

if __name__ == "__main__":
    main()